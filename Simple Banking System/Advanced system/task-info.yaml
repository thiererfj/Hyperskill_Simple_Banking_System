type: edu
custom_name: stage4
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {
            try {
                Files.deleteIfExists(Paths.get(tempDatabaseFileName));
                Files.deleteIfExists(Paths.get(databaseFileName));
            } catch (Exception ignored) {
            }

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        closeConnection();
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                closeConnection();
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram();
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        //@BeforeClass
        public static void createTempDatabase() {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        //@AfterClass
        public static void deleteTempDatabase() {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }
    }
  learner_created: false
- name: src/banking/CustomerAccountMenu.java
  visible: true
  text: |
    package banking;

    import java.util.Scanner;

    public class CustomerAccountMenu {

        private CustomerAccount currentUser;
        private Scanner userInput;
        private BankingSystemMenu systemMenu;

        public CustomerAccountMenu(CustomerAccount currentUser, Scanner userInput, BankingSystemMenu systemMenu) {
            this.currentUser = currentUser;
            this.userInput = userInput;
            this.systemMenu = systemMenu;
        }

        public void runUserAccount() {
            printUserMenu();
            runUserOption();
        }

        public void printUserMenu() {
            System.out.println("1. Balance");
            System.out.println("2. Log out");
            System.out.println("0. Exit\n");
        }

        public void runUserOption() {
            while (userInput.hasNext()) {
                switch (userInput.nextInt()) {
                    case 0: exitSystem();
                        break;
                    case 1: checkBalance();
                        break;
                    case 2: logOut();
                        break;
                    default:
                        System.out.println("Enter an option");
                        break;
                }
            }
        }

        public void exitSystem() {
            System.out.println("\nBye!");
            System.exit(0);
        }

        public void checkBalance() {
            System.out.println("Balance: " + currentUser.getAccountBalance() + "\n");
            runUserAccount();
        }

        public void logOut() {
            currentUser = null;
            System.out.println("\nYou have successfully logged out!\n");
            systemMenu.printMainMenu();
        }

    }
  learner_created: true
- name: src/banking/CreateCustomerAccount.java
  visible: true
  text: |
    package banking;

    import java.util.Arrays;
    import java.util.List;
    import java.util.Random;
    import java.util.concurrent.ThreadLocalRandom;

    public class CreateCustomerAccount {

        private List<CustomerAccount> customerAccountList;
        private String newCardNumber;
        private String newPINCode;
        private ThreadLocalRandom random = ThreadLocalRandom.current();
        private StringBuilder newCardNumberBuilder;
        private static int customerIdNumber = 0;

        public CreateCustomerAccount(List<CustomerAccount> customerAccountList) {
            this.customerAccountList = customerAccountList;
        }

        public CustomerAccount createNewAccount() {
            Integer generateNewPINCode = random.nextInt(9999);

            if (generateNewPINCode < 1000) {
                generateNewPINCode += 1000;
            }

            newPINCode = generateNewPINCode.toString();
            createNewCardNumberWithLuhnAlgo();
            CustomerAccount newCustomerAccount = null;

            if (accountNumberIsUnique(newCardNumber)) {
                newCustomerAccount = new CustomerAccount(customerIdNumber, newCardNumber, newPINCode);
                customerIdNumber++;
            } else {
                createNewAccount();
            }

            return newCustomerAccount;
        }

        private void createNewCardNumberWithLuhnAlgo() {
            newCardNumberBuilder = new StringBuilder();

            String bankIdentificationNumber = "400000";
            newCardNumberBuilder.append(bankIdentificationNumber);

            Integer generateNewAccountNumber = random.nextInt(100000000, 999999999 + 1);
            newCardNumberBuilder.append(generateNewAccountNumber);
            System.out.println(newCardNumberBuilder.toString());

            Integer generateCheckSum = createCheckSum(newCardNumberBuilder.toString());
            newCardNumberBuilder.append(generateCheckSum);

            newCardNumber = newCardNumberBuilder.toString();
        }

        private Integer createCheckSum(String fifteenDigitNumber) {
            char[] numsInCharArray = fifteenDigitNumber.toCharArray();
            int[] cardNums = new int[numsInCharArray.length];
            int sum = 0;
            int checkSum = 0;

            for (int i = 0; i < cardNums.length; i++) {
                cardNums[i] = Integer.parseInt("" + numsInCharArray[i]);
            }

            for (int i = 0; i < cardNums.length; i++) {
                if ((i + 1) % 2 != 0) {
                    cardNums[i] *= 2;
                }
                if (cardNums[i] > 9) {
                    cardNums[i] -= 9;
                }
                sum += cardNums[i];
            }

            if (sum % 10 == 0) {
                checkSum = 0;
            } else {
                checkSum = (10 - (sum % 10));
            }

            return Integer.valueOf(checkSum);
        }

        private boolean accountNumberIsUnique(String newCardNumber) {
            for (int i = 0; i < customerAccountList.size(); i++) {
                if (customerAccountList.get(i).getCardNumber().equals(newCardNumber)) {
                    return false;
                }
            }
            return true;
        }
    }
  learner_created: true
- name: src/banking/CustomerAccount.java
  visible: true
  text: |
    package banking;

    public class CustomerAccount {

        private int identificationNumber;
        private String cardNumber;
        private String PINCode;
        private Integer accountBalance = 0;

        public CustomerAccount(int identificationNumber, String cardNumber, String PINCode) {
            this.identificationNumber = identificationNumber;
            this.cardNumber = cardNumber;
            this.PINCode = PINCode;
        }

        public int getIdentificationNumber() {return identificationNumber;}

        public String getCardNumber() {
            return cardNumber;
        }

        public String getPINCode() {
            return PINCode;
        }

        public Integer getAccountBalance() {
            return accountBalance;
        }
    }
  learner_created: true
- name: src/banking/BankingSystemMenu.java
  visible: true
  text: |
    package banking;

    import org.sqlite.SQLiteDataSource;

    import java.sql.Connection;
    import java.sql.SQLException;
    import java.sql.Statement;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.Scanner;

    public class BankingSystemMenu {

        private final Scanner userInput = new Scanner(System.in);
        private List<CustomerAccount> customerAccountList = new ArrayList<>();
        private static Random random = new Random();
        private static String url;
        private static SQLiteDataSource dataSource;

        public BankingSystemMenu(String[] args) {
            createDatabaseAndTable(args);
            printMainMenu();
        }

        private void createDatabaseAndTable(String[] args) {
            url = "jdbc:sqlite:" + args[1];

            dataSource = new SQLiteDataSource();
            dataSource.setUrl(url);

            try (Connection connection = dataSource.getConnection()) {
                if (connection.isValid(5)) {
                    try (Statement statement = connection.createStatement()) {
                        statement.executeQuery("CREATE TABLE card (id INTEGER, number TEXT, " +
                                "pin TEXT, balance INTEGER DEFAULT 0);");
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        public void printMainMenu() {
            System.out.println("1. Create an account");
            System.out.println("2. Log into account");
            System.out.println("0. Exit\n");

            runUserOption();
        }

        public void runUserOption() {
            while (userInput.hasNext()) {
                switch (userInput.nextInt()) {
                    case 0: exitSystem();
                            break;
                    case 1: userInput.nextLine();
                            createAccount();
                            break;
                    case 2: userInput.nextLine();
                            logIntoAccount();
                            break;
                    default:
                        System.out.println("Enter an option");
                            break;
                }
            }
        }

        public void exitSystem() {
            System.out.println("\nBye!");
            System.exit(0);
        }

        public void createAccount() {
            CreateCustomerAccount accountCreator = new CreateCustomerAccount(customerAccountList);
            CustomerAccount newCustomerAccount = accountCreator.createNewAccount();

            dataSource = new SQLiteDataSource();
            dataSource.setUrl(url);

            customerAccountList.add(newCustomerAccount);
            System.out.println("Your card has been created");
            System.out.println("Your card number: ");
            System.out.println(newCustomerAccount.getCardNumber());
            System.out.println("Your card PIN: ");
            System.out.println(newCustomerAccount.getPINCode() + "\n");

            addCustomerAccountToDatabase(newCustomerAccount.getIdentificationNumber(), newCustomerAccount.getCardNumber(),
                    newCustomerAccount.getPINCode(), newCustomerAccount.getAccountBalance());

            printMainMenu();
        }

        public void logIntoAccount() {
            System.out.println("Enter your card number: ");
            String logInCardNumber = userInput.nextLine();
            System.out.println("Enter your PIN code: ");
            String logInPINCode = userInput.nextLine();

            for (int i = 0; i < customerAccountList.size(); i++) {
                if (logInCardNumber.equals(customerAccountList.get(i).getCardNumber()) &&
                        logInPINCode.equals(customerAccountList.get(i).getPINCode())) {
                    System.out.println("\nYou have successfully logged in!\n");
                    CustomerAccountMenu userLoggedIn = new CustomerAccountMenu(customerAccountList.get(i), userInput,
                            this);
                    userLoggedIn.runUserAccount();
                } else {
                    System.out.println("Wrong card number or PIN!");
                    printMainMenu();
                }
            }
        }

        public void addCustomerAccountToDatabase(int identificationNumber, String cardNumber, String PINCode, int balance) {
            try (Connection connection = dataSource.getConnection()) {
                if (connection.isValid(5)) {
                    System.out.println("test connextion is valid");
                    try (Statement statement = connection.createStatement()) {
                        statement.executeQuery("INSERT INTO card(id, number, pin, balance)" +
                                "VALUES(" + identificationNumber + ", '" + cardNumber + "', '" + PINCode + "', " + balance + ");");
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/518/implement#comment
status: Failed
feedback:
  message: "Wrong answer in test #10\n\nAfter choosing &#39;Exit&#39; item you should\
    \ stop your program and close database connection!\n\nPlease find below the output\
    \ of your program during this failed test.\nNote that the &#39;&gt;&#39; character\
    \ indicates the beginning of the input line.\n\n---\n\nArguments for Main: -fileName\
    \ card.s3db\nArguments for Main: -fileName card.s3db\n\nstdout:\n1. Create an\
    \ account\n2. Log into account\n0. Exit\n\n&gt; 1\n400000954062034\nYour card\
    \ has been created\nYour card number: \n4000009540620344\nYour card PIN: \n4709\n\
    \n1. Create an account\n2. Log into account\n0. Exit\n\n&gt; 2\nEnter your card\
    \ number: \n&gt; 4000009540620344\nEnter your PIN code: \n&gt; 4709\n\nYou have\
    \ successfully logged in!\n\n1. Balance\n2. Add income\n3. Do transfer\n4. Close\
    \ account\n5. Log out\n0. Exit\n\n&gt; 2\nEnter income: \n&gt; 10000\nIncome was\
    \ added!\n&gt; 0\n\nBye!\n1. Create an account\n2. Log into account\n0. Exit\n\
    \n&gt; 2\nEnter your card number: \n&gt; 4000009540620344\nEnter your PIN code:\
    \ \n&gt; 4709\n&gt; 2\nEnter your card number: \n&gt; 15000\nEnter your PIN code:\
    \ \n&gt; 0\n\nstderr:\norg.sqlite.SQLiteException: [SQLITE_ERROR] SQL error or\
    \ missing database (table card already exists)\n\tat org.sqlite.core.DB.newSQLException(DB.java:1012)\n\
    \tat org.sqlite.core.DB.newSQLException(DB.java:1024)\n\tat org.sqlite.core.DB.throwex(DB.java:989)\n\
    \tat org.sqlite.core.NativeDB.prepare_utf8(Native Method)\n\tat org.sqlite.core.NativeDB.prepare(NativeDB.java:134)\n\
    \tat org.sqlite.core.DB.prepare(DB.java:257)\n\tat org.sqlite.jdbc3.JDBC3Statement.executeQuery(JDBC3Statement.java:66)\n\
    \tat banking.CustomerAccountDatabase.sendQueryToSQLiteDatabase(CustomerAccountDatabase.java:35)\n\
    \tat banking.CustomerAccountDatabase.initSQLiteDatabase(CustomerAccountDatabase.java:46)\n\
    \tat banking.CustomerAccountDatabase.&lt;init&gt;(CustomerAccountDatabase.java:25)\n\
    \tat banking.BankingSystemMenu.&lt;init&gt;(BankingSystemMenu.java:19)\n\tat banking.Main.main(Main.java:7)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:172)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$0(MainMethodExecutor.java:199)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\norg.sqlite.SQLiteException:\
    \ [SQLITE_ERROR] SQL error or missing database (no such table: cards)\n\tat org.sqlite.core.DB.newSQLException(DB.java:1012)\n\
    \tat org.sqlite.core.DB.newSQLException(DB.java:1024)\n\tat org.sqlite.core.DB.throwex(DB.java:989)\n\
    \tat org.sqlite.core.NativeDB.prepare_utf8(Native Method)\n\tat org.sqlite.core.NativeDB.prepare(NativeDB.java:134)\n\
    \tat org.sqlite.core.DB.prepare(DB.java:257)\n\tat org.sqlite.jdbc3.JDBC3Statement.executeQuery(JDBC3Statement.java:66)\n\
    \tat banking.CustomerAccountDatabase.sendQueryToSQLiteDatabase(CustomerAccountDatabase.java:35)\n\
    \tat banking.CustomerAccountDatabase.loadCustomerAccountList(CustomerAccountDatabase.java:51)\n\
    \tat banking.CustomerAccountDatabase.&lt;init&gt;(CustomerAccountDatabase.java:26)\n\
    \tat banking.BankingSystemMenu.&lt;init&gt;(BankingSystemMenu.java:19)\n\tat banking.Main.main(Main.java:7)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:172)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$0(MainMethodExecutor.java:199)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\njava.sql.SQLException: query\
    \ does not return ResultSet\n\tat org.sqlite.jdbc3.JDBC3Statement.executeQuery(JDBC3Statement.java:70)\n\
    \tat banking.CustomerAccountDatabase.sendQueryToSQLiteDatabase(CustomerAccountDatabase.java:35)\n\
    \tat banking.CustomerAccountDatabase.addNewCustomerAccount(CustomerAccountDatabase.java:83)\n\
    \tat banking.BankingSystemMenu.createAccount(BankingSystemMenu.java:60)\n\tat\
    \ banking.BankingSystemMenu.runUserOption(BankingSystemMenu.java:38)\n\tat banking.BankingSystemMenu.printMainMenu(BankingSystemMenu.java:28)\n\
    \tat banking.BankingSystemMenu.&lt;init&gt;(BankingSystemMenu.java:20)\n\tat banking.Main.main(Main.java:7)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:172)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$0(MainMethodExecutor.java:199)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\njava.sql.SQLException: query\
    \ does not return ResultSet\n\tat org.sqlite.jdbc3.JDBC3Statement.executeQuery(JDBC3Statement.java:70)\n\
    \tat banking.CustomerAccountDatabase.sendQueryToSQLiteDatabase(CustomerAccountDatabase.java:35)\n\
    \tat banking.CustomerAccountDatabase.addIncomeToCustomerAccountBalance(CustomerAccountDatabase.java:116)\n\
    \tat banking.CustomerAccountMenu.addIncome(CustomerAccountMenu.java:76)\n\tat\
    \ banking.CustomerAccountMenu.runUserOption(CustomerAccountMenu.java:44)\n\tat\
    \ banking.CustomerAccountMenu.runUserAccount(CustomerAccountMenu.java:22)\n\t\
    at banking.CustomerAccountDatabase.loginCustomerAccount(CustomerAccountDatabase.java:100)\n\
    \tat banking.BankingSystemMenu.logIntoAccount(BankingSystemMenu.java:77)\n\tat\
    \ banking.BankingSystemMenu.runUserOption(BankingSystemMenu.java:41)\n\tat banking.BankingSystemMenu.printMainMenu(BankingSystemMenu.java:28)\n\
    \tat banking.BankingSystemMenu.createAccount(BankingSystemMenu.java:68)\n\tat\
    \ banking.BankingSystemMenu.runUserOption(BankingSystemMenu.java:38)\n\tat banking.BankingSystemMenu.printMainMenu(BankingSystemMenu.java:28)\n\
    \tat banking.BankingSystemMenu.&lt;init&gt;(BankingSystemMenu.java:20)\n\tat banking.Main.main(Main.java:7)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:172)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$0(MainMethodExecutor.java:199)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\norg.sqlite.SQLiteException:\
    \ [SQLITE_ERROR] SQL error or missing database (table card already exists)\n\t\
    at org.sqlite.core.DB.newSQLException(DB.java:1012)\n\tat org.sqlite.core.DB.newSQLException(DB.java:1024)\n\
    \tat org.sqlite.core.DB.throwex(DB.java:989)\n\tat org.sqlite.core.NativeDB.prepare_utf8(Native\
    \ Method)\n\tat org.sqlite.core.NativeDB.prepare(NativeDB.java:134)\n\tat org.sqlite.core.DB.prepare(DB.java:257)\n\
    \tat org.sqlite.jdbc3.JDBC3Statement.executeQuery(JDBC3Statement.java:66)\n\t\
    at banking.CustomerAccountDatabase.sendQueryToSQLiteDatabase(CustomerAccountDatabase.java:35)\n\
    \tat banking.CustomerAccountDatabase.initSQLiteDatabase(CustomerAccountDatabase.java:46)\n\
    \tat banking.CustomerAccountDatabase.&lt;init&gt;(CustomerAccountDatabase.java:25)\n\
    \tat banking.BankingSystemMenu.&lt;init&gt;(BankingSystemMenu.java:19)\n\tat banking.Main.main(Main.java:7)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:172)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$0(MainMethodExecutor.java:199)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\norg.sqlite.SQLiteException:\
    \ [SQLITE_ERROR] SQL error or missing database (no such table: cards)\n\tat org.sqlite.core.DB.newSQLException(DB.java:1012)\n\
    \tat org.sqlite.core.DB.newSQLException(DB.java:1024)\n\tat org.sqlite.core.DB.throwex(DB.java:989)\n\
    \tat org.sqlite.core.NativeDB.prepare_utf8(Native Method)\n\tat org.sqlite.core.NativeDB.prepare(NativeDB.java:134)\n\
    \tat org.sqlite.core.DB.prepare(DB.java:257)\n\tat org.sqlite.jdbc3.JDBC3Statement.executeQuery(JDBC3Statement.java:66)\n\
    \tat banking.CustomerAccountDatabase.sendQueryToSQLiteDatabase(CustomerAccountDatabase.java:35)\n\
    \tat banking.CustomerAccountDatabase.loadCustomerAccountList(CustomerAccountDatabase.java:51)\n\
    \tat banking.CustomerAccountDatabase.&lt;init&gt;(CustomerAccountDatabase.java:26)\n\
    \tat banking.BankingSystemMenu.&lt;init&gt;(BankingSystemMenu.java:19)\n\tat banking.Main.main(Main.java:7)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:172)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$0(MainMethodExecutor.java:199)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)"
  time: Wed, 01 Jun 2022 20:23:45 UTC
record: -1
